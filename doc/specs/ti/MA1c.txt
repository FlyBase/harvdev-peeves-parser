
## ! MA1c. Action - rename this insertion symbol    :

### Multiple values allowed:
No
Implemented (in validate_rename)


### !c Applicable:

No
Implemented (in validate_rename)

### Inclusion essential:

No
Implemented

### Mandatorially has value:

No
Implemented (in validate_rename)

### Dupl. for multiple field:

No (Implemented)


### Checks:

Cross-checks within field

  * the data must either be empty or be a single valid symbol of a insertion which exists
in Chado. (in validate_rename)

  * sub 'no_hashes_in_proforma'- checks that there are no hashes in the entire proforma if MA1c is filled in

Cross-checks with other fields:

  * symbol in MA1c cannot be the same as in MA1a (in validate_rename and cross_check_harv_style_symbol_rename_merge_fields)

Cross-checks with other fields

   * subroutine 'cross_check_harv_style_symbol_rename_merge_fields' - see MA1f.txt for details of what this subroutine does.

   * If MA4 is empty, but MA1c is filled in (ie. it is a rename)
    * check whether the inserted element portion of the symbols in MA1a and MA1c are the same.
     * if they are different (i.e. the element in the insertion is being changed), print an error message saying "You have changed the 'inserted element' portion of the insertion symbol, but have not filled in the MA4 field to also change the inserted element". (Note that other permutations of errors for this rare type of rename are caught by other checks involving MA1a and MA4).

### Related fields:

* GA10 fields

### Comments:

'validate_rename' subroutine still uses dehash despite presence of 'no_hashes_in_proforma' in basic field checks, but left for now and may well be advantageous/necessary to keep it, for same reasons as given in G1e.txt


### Status:



### Updated:

gm151001.
